{"version":3,"sources":["Components/Box.js","Algorithms/minimax.js","Components/App.js","index.js"],"names":["Box","props","c","winner","i","index","j","className","onClick","style","backgroundColor","val","minimax","values","depth","player","AI","position","evaluate","isMovesLeft","maxVal","Math","max","minVal","min","App","state","turn","count","setState","renderRow","row","push","key","renderBox","display","gameOver","checkWin","getColor","reset","mode","changeMode","renderDescription","this","moves","x","y","move","console","log","bestMove","setTimeout","React","Component","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.8c4df4a6.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst color = (c, winner) => {\r\n    if(winner !== null)\r\n    {\r\n        return winner ? \"red\":\"blue\";\r\n    }\r\n    if(c === null) return \"white\";\r\n    return c ? \"red\":\"blue\"; \r\n}\r\n\r\nconst Box = (props) => {\r\n    const i = props.index[0], j = props.index[1];\r\n    return (\r\n        <div className = \"col-xs-4\" onClick = {() => props.onClick(i, j)} style = {{backgroundColor : `${color(props.val, props.winner)}`}}>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Box;","// https://www.geeksforgeeks.org/minimax-algorithm-in-game-theory-set-1-introduction/\r\n// https://www.geeksforgeeks.org/minimax-algorithm-in-game-theory-set-2-evaluation-function/?ref=lbp\r\n// https://www.geeksforgeeks.org/minimax-algorithm-in-game-theory-set-3-tic-tac-toe-ai-finding-optimal-move/?ref=lbp\r\n\r\nconst minimax = (values, depth, player, AI) => { \r\n    const position = evaluate(values, AI);\r\n    if(position === 100) return position - depth;\r\n    else if(position === -100) return position + depth;\r\n    if(!isMovesLeft(values)) return 0;\r\n    if(player === AI)\r\n    {\r\n        var maxVal = -1000;\r\n        for(var i = 0;i < 3;i++)\r\n        {\r\n            for(var j = 0;j < 3;j++) \r\n            {\r\n                if(values[i][j] === null)\r\n                {\r\n                    values[i][j] = AI;\r\n                    maxVal = Math.max(maxVal, minimax(values, depth+1, !player, AI))\r\n                    values[i][j] = null;\r\n                }\r\n            }\r\n        }\r\n        return maxVal;\r\n    }\r\n    else \r\n    {\r\n        var minVal = 1000;\r\n        for(i = 0;i < 3;i++)\r\n        {\r\n            for(j = 0;j < 3;j++) \r\n            {\r\n                if(values[i][j] === null)\r\n                {\r\n                    values[i][j] = !AI;\r\n                    minVal = Math.min(minVal, minimax(values, depth+1, !player, AI))\r\n                    values[i][j] = null;\r\n                }\r\n            }\r\n        }\r\n        return minVal;\r\n    }\r\n}\r\n\r\nconst evaluate = (values, AI) => {\r\n    for(var i = 0;i < 3;i++)\r\n    {\r\n        if(values[i][0] === values[i][1] && values[i][1] === values[i][2] && values[i][2] !== null) return values[i][0] === AI ? 100:(-100);\r\n    }\r\n\r\n    for(i = 0;i < 3;i++)\r\n    {\r\n        if(values[0][i] === values[1][i] && values[1][i] === values[2][i] && values[2][i] !== null) return values[0][i] === AI ? 100:(-100);\r\n    }\r\n    \r\n    if(values[0][0] === values[1][1] && values[1][1] === values[2][2] && values[2][2] !== null) return values[1][1] === AI ? 100:(-100);\r\n    if(values[2][0] === values[1][1] && values[1][1] === values[0][2] && values[0][2] !== null) return values[1][1] === AI ? 100:(-100);\r\n\r\n    return 0;\r\n}\r\n\r\nexport const isMovesLeft = (values) => {\r\n    for(var i = 0;i < 3;i++)\r\n    {\r\n        for(var j = 0;j < 3;j++) \r\n        {\r\n            if(values[i][j] === null) return 1;\r\n        }\r\n    }\r\n    return 0;\r\n}\r\n\r\nexport const bestMove = (values, AI) => {\r\n    var maxVal = -1000;\r\n    var x = -1, y = -1;\r\n    for(var i = 0;i < 3;i++)\r\n    {\r\n        for(var j = 0;j < 3;j++) \r\n        {\r\n            if(values[i][j] === null)\r\n            {\r\n                values[i][j] = AI;\r\n                var move =  minimax(values, 0, false, AI)\r\n                console.log(move);\r\n                values[i][j] = null;\r\n\r\n                if(move > maxVal)\r\n                {\r\n                    maxVal = move;\r\n                    x = i; \r\n                    y = j;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return[x, y];\r\n}","import React from 'react'\r\nimport Box from './Box'\r\nimport { bestMove, isMovesLeft } from '../Algorithms/minimax.js'\r\nimport '../App.css'\r\n\r\nclass App extends React.Component {\r\n    state = {\r\n        values : [\r\n            [null,null, null],\r\n            [null,null, null],\r\n            [null,null, null],\r\n        ],\r\n        turn : false,\r\n        winner: null,\r\n        count: [0, 0],\r\n        AI: false\r\n    }\r\n \r\n     onClick = (i, j) => {\r\n        if(this.state.values[i][j] !== null || this.state.winner !== null) return; \r\n        var values = this.state.values;\r\n        values[i][j] = this.state.turn;  \r\n        this.setState({\r\n            values: values,\r\n            turn : !(this.state.turn)\r\n        })\r\n    }\r\n\r\n    renderRow = (i) => {\r\n        var row = [];              \r\n        for(var j = 0;j < 3;j++)\r\n        {\r\n            row.push(\r\n                <Box \r\n                    onClick = {this.onClick}\r\n                    val = {\r\n                        this.state.values[i][j]\r\n                    }\r\n                    key = {i*100+j*200}\r\n                    index = {[i, j]}\r\n                    winner = {this.state.winner}\r\n                />\r\n            );\r\n        }\r\n        return row;\r\n    }\r\n\r\n    renderBox = () => {\r\n        var display = []\r\n        for(var i = 0;i < 3;i++)\r\n        {\r\n            var row = [];\r\n            row.push(\r\n                <div className = \"row\" key = {i}>\r\n                    {this.renderRow(i)}\r\n                </div>\r\n            )\r\n            display.push(row);\r\n        }\r\n        return display;\r\n    }\r\n\r\n    gameOver = (winner) => {\r\n        this.setState({\r\n            winner: winner,\r\n            count: [this.state.count[0] + (winner ? 1:0),this.state.count[1] +  (winner ? 0:1)]\r\n        })\r\n    } \r\n\r\n    checkWin = () => {\r\n        if(this.state.winner !== null) return ;\r\n        const values = this.state.values;\r\n        for(var i = 0;i < 3;i++)\r\n        {\r\n            if(values[i][0] === values[i][1] && values[i][1] === values[i][2] && values[i][2] !== null) return this.gameOver(values[i][0]);\r\n        }\r\n\r\n        for(i = 0;i < 3;i++)\r\n        {\r\n            if(values[0][i] === values[1][i] && values[1][i] === values[2][i] && values[2][i] !== null) return this.gameOver(values[0][i]);\r\n        }\r\n        \r\n        if(values[0][0] === values[1][1] && values[1][1] === values[2][2] && values[2][2] !== null) return this.gameOver(values[1][1]);\r\n        if(values[2][0] === values[1][1] && values[1][1] === values[0][2] && values[0][2] !== null) return this.gameOver(values[1][1]);\r\n    }\r\n\r\n    getColor = (player) => {\r\n        return player ? \"red\":\"blue\";\r\n    }\r\n\r\n    reset = (mode) => {\r\n        this.setState({\r\n            values : [\r\n                [null, null, null],\r\n                [null, null, null],\r\n                [null, null, null],\r\n            ],\r\n            turn : false,\r\n            winner: null,\r\n            AI: mode \r\n        })\r\n    }\r\n\r\n    changeMode = () => {\r\n        this.reset(!this.state.AI);\r\n    }\r\n    \r\n    renderDescription = () => {\r\n        if(this.state.winner !== null)\r\n        {\r\n            return `${this.getColor(this.state.winner)} has won the game!`;\r\n        }\r\n        else if(isMovesLeft(this.state.values))\r\n        {\r\n            return `${this.getColor(this.state.turn)}'s turn`;\r\n        }\r\n        return \"Draw\"\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className = \"container\">\r\n                <div className = \"row\">\r\n                    <h1>Tic-Tac-Toe</h1>\r\n                </div>\r\n                <div className = \"row\">\r\n                    <h5>\r\n                        {this.renderDescription()}\r\n                    </h5>\r\n                </div>\r\n                {this.renderBox()}\r\n                <div className = \"row\">\r\n                    <div className = \"col-xs-6\">\r\n                        <button className = \"btn btn-light\" onClick = {() => this.reset(this.state.AI)}>\r\n                            Reset Board\r\n                        </button>\r\n                    </div>\r\n                    <div className = \"col-xs-6\">\r\n                        <button className = \"btn btn-light\" onClick = {this.changeMode}>\r\n                            Play against {this.state.AI ? \"human\":\"AI\"}\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div className = \"row\">\r\n                    <h3>Scores</h3>\r\n                </div>\r\n                <div className = \"row\">\r\n                    <div className = \"col-xs-6 card\">Blue (Player 1): {this.state.count[1]}</div>\r\n                    <div className = \"col-xs-6 card\">Red ({this.state.AI ? \"AI\":\"Player 2\"}): {this.state.count[0]}</div>\r\n                </div>\r\n                <div className = \"row\">\r\n                    <button className=\"btn btn-light\" onClick={() => this.setState({count: [0, 0]})}>\r\n                        Reset Scores\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.checkWin();\r\n        if(this.state.AI)\r\n        {\r\n            if(this.state.turn) \r\n            {\r\n                const moves = bestMove(this.state.values, this.state.turn);\r\n                const i = moves[0], j = moves[1];\r\n                if(i !== -1) setTimeout(this.onClick(i, j), 5000);\r\n            }\r\n            this.checkWin();\r\n        }\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './Components/App'\r\n\r\nReactDOM.render(<App />, document.querySelector(\"#root\"));"],"sourceRoot":""}